#include "Matrix.h"

//*****************************************************************************
//
//*****************************************************************************

void Matrix::identity()
{
	_11 = 1; _12 = 0; _13 = 0; _14 = 0;
	_21 = 0; _22 = 1; _23 = 0; _24 = 0;
	_31 = 0; _32 = 0; _33 = 1; _34 = 0;
	_41 = 0; _42 = 0; _43 = 0; _44 = 1;
}

//*****************************************************************************
//
//*****************************************************************************
//------------------------------------------------------
//
//------------------------------------------------------
void Matrix::multiply(const Matrix & mat1, const Matrix & mat2)
{
	Matrix work;
	work._11 = mat1._11*mat2._11 + mat1._12*mat2._21 + mat1._13*mat2._31 + mat1._14*mat2._41;
	work._12 = mat1._11*mat2._12 + mat1._12*mat2._22 + mat1._13*mat2._32 + mat1._14*mat2._42;
	work._13 = mat1._11*mat2._13 + mat1._12*mat2._23 + mat1._13*mat2._33 + mat1._14*mat2._43;
	work._14 = mat1._11*mat2._14 + mat1._12*mat2._24 + mat1._13*mat2._34 + mat1._14*mat2._44;

	work._21 = mat1._21*mat2._11 + mat1._22*mat2._21 + mat1._23*mat2._31 + mat1._24*mat2._41;
	work._22 = mat1._21*mat2._12 + mat1._22*mat2._22 + mat1._23*mat2._32 + mat1._24*mat2._42;
	work._23 = mat1._21*mat2._13 + mat1._22*mat2._23 + mat1._23*mat2._33 + mat1._24*mat2._43;
	work._24 = mat1._21*mat2._14 + mat1._22*mat2._24 + mat1._23*mat2._34 + mat1._24*mat2._44;

	work._31 = mat1._31*mat2._11 + mat1._32*mat2._21 + mat1._33*mat2._31 + mat1._34*mat2._41;
	work._32 = mat1._31*mat2._12 + mat1._32*mat2._22 + mat1._33*mat2._32 + mat1._34*mat2._42;
	work._33 = mat1._31*mat2._13 + mat1._32*mat2._23 + mat1._33*mat2._33 + mat1._34*mat2._43;
	work._34 = mat1._31*mat2._14 + mat1._32*mat2._24 + mat1._33*mat2._34 + mat1._34*mat2._44;

	work._41 = mat1._41*mat2._11 + mat1._42*mat2._21 + mat1._43*mat2._31 + mat1._44*mat2._41;
	work._42 = mat1._41*mat2._12 + mat1._42*mat2._22 + mat1._43*mat2._32 + mat1._44*mat2._42;
	work._43 = mat1._41*mat2._13 + mat1._42*mat2._23 + mat1._43*mat2._33 + mat1._44*mat2._43;
	work._44 = mat1._41*mat2._14 + mat1._42*mat2._24 + mat1._43*mat2._34 + mat1._44*mat2._44;

	memcpy(&_11, &work._11, sizeof(Matrix));

}

void Matrix::multiply(float val)
{
	_11 *= val; _12 *= val; _13 *= val; _14 *= val;
	_21 *= val; _22 *= val; _23 *= val; _24 *= val;
	_31 *= val; _32 *= val; _33 *= val; _34 *= val;
	_41 *= val; _42 *= val; _43 *= val; _44 *= val;
}

void Matrix::inverse()
{
	Matrix b;
	b._11 = _22 * (_33*_44 - _34*_43) + _23*(_34*_42 - _32*_44) + _24*(_32*_43 - _33*_42);
	b._12 = _32 * (_43*_14 - _44*_13) + _33*(_44*_12 - _42*_14) + _34*(_42*_13 - _43*_12);
	b._13 = _42 * (_13*_24 - _14*_23) + _43*(_14*_22 - _12*_24) + _44*(_12*_23 - _13*_22);
	b._14 = _12 * (_23*_34 - _24*_33) + _13*(_24*_32 - _22*_34) + _14*(_22*_33 - _23*_32);

	b._21 = _23 * (_34*_41 - _31*_44) + _24*(_31*_43 - _33*_41) + _21*(_33*_44 - _34*_43);
	b._22 = _33 * (_44*_11 - _41*_14) + _34*(_41*_13 - _43*_11) + _31*(_43*_14 - _44*_13);
	b._23 = _43 * (_14*_21 - _11*_24) + _44*(_11*_23 - _13*_21) + _41*(_13*_24 - _14*_23);
	b._24 = _13 * (_24*_31 - _21*_34) + _14*(_21*_33 - _23*_31) + _11*(_23*_34 - _24*_33);

	b._31 = _24 * (_31*_42 - _32*_41) + _21*(_32*_44 - _34*_42) + _22*(_34*_41 - _31*_44);
	b._32 = _34 * (_41*_12 - _42*_11) + _31*(_42*_14 - _44*_12) + _32*(_44*_11 - _41*_14);
	b._33 = _44 * (_11*_22 - _12*_21) + _41*(_12*_24 - _14*_22) + _42*(_14*_21 - _11*_24);
	b._34 = _14 * (_21*_32 - _22*_31) + _11*(_22*_34 - _24*_32) + _12*(_24*_31 - _21*_34);

	b._41 = _21 * (_32*_43 - _33*_42) + _22*(_33*_41 - _31*_43) + _23*(_31*_42 - _32*_41);
	b._42 = _31 * (_42*_13 - _43*_12) + _32*(_43*_11 - _41*_13) + _33*(_41*_12 - _42*_11);
	b._43 = _41 * (_12*_23 - _13*_22) + _42*(_13*_21 - _11*_23) + _43*(_11*_22 - _12*_21);
	b._44 = _11 * (_22*_33 - _23*_32) + _12*(_23*_31 - _21*_33) + _13*(_21*_32 - _22*_31);

	float det = 1.0f / (_11*b._11 + _21*b._12 + _31*b._13 + _41*b._14);

	_11 = b._11 * det;	_12 = b._12 * det;	_13 = b._13 * det;	_14 = b._14 * det;
	_21 = b._21 * det;	_22 = b._22 * det;	_23 = b._23 * det;	_24 = b._24 * det;
	_31 = b._31 * det;	_32 = b._32 * det;	_33 = b._33 * det;	_34 = b._34 * det;
	_41 = b._41 * det;	_42 = b._42 * det;	_43 = b._43 * det;	_44 = b._44 * det;
}


//*****************************************************************************
//
//*****************************************************************************
//------------------------------------------------------
//	ビュー行列作成
//------------------------------------------------------
void Matrix::LookAt(const Vector3 & position, const Vector3 & target, const Vector3 & up)
{
	Vector3 xaxis;
	Vector3 yaxis;
	Vector3 zaxis = (position - target);
	zaxis.Normalize();
	Vector3::cross(xaxis, up, zaxis);
	Vector3::cross(yaxis, zaxis, xaxis);

	_11 = xaxis.x;	_12 = yaxis.x;	_13 = zaxis.x;	_14 = 0;
	_21 = xaxis.y;	_22 = yaxis.y;	_23 = zaxis.y;	_24 = 0;
	_31 = xaxis.z;	_32 = yaxis.z;	_33 = zaxis.z;	_34 = 0;
	_41 = -Vector3::dot(xaxis, position);
	_42 = -Vector3::dot(yaxis, position);
	_43 = -Vector3::dot(zaxis, position);
	_44 = 1;
}

//------------------------------------------------------
//	透視変換行列作成
//------------------------------------------------------
void Matrix::PerspectiveFov(float fovY, float aspect, float znear, float zfar)
{
	float top = znear * tanf(fovY);
	float bottom = -top;
	float left = bottom * aspect;
	float right = top * aspect;
	_11 = 2 * znear / (right - left);
	_12 = 0;
	_13 = 0;
	_14 = 0;

	_21 = 0;
	_22 = 2 * znear / (top - bottom);
	_23 = 0;
	_24 = 0;

	_31 = (right + left) / (right - left);
	_32 = (top + bottom) / (top - bottom);
	_33 = -(zfar + znear) / (zfar - znear);
	_34 = -1;

	_41 = 0;
	_42 = 0;
	_43 = -2 * zfar * znear / (zfar - znear);
	_44 = 0;
}

//*****************************************************************************
//
//*****************************************************************************
//------------------------------------------------------
//
//------------------------------------------------------
void Matrix::RotationZXY(float x, float y, float z)
{
	float	sx, sy, sz, cx, cy, cz;

	sx = sinf(x);	sy = sinf(y);	sz = sinf(z);
	cx = cosf(x);	cy = cosf(y);	cz = cosf(z);

	_11 = cz*cy + sz*sx*sy;
	_12 = sz*cx;
	_13 = -cz*sy + sz*sx*cy;
	_14 = 0;

	_21 = -sz*cy + cz*sx*sy;
	_22 = cz*cx;
	_23 = sz*sy + cz*sx*cy;
	_24 = 0;

	_31 = cx*sy;
	_32 = -sx;
	_33 = cx*cy;
	_34 = 0;

	_41 = 0;
	_42 = 0;
	_43 = 0;
	_44 = 1;
}
